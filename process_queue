import Queue
import threading
import time

exitFlag = 0
queueLock = threading.Lock()
workQueue = Queue.Queue(10)

def process_data(threadName,q):
    while not exitFlag:
        queueLock.acquire()
        if not workQueue.empty():
            data = q.get()
            queueLock.release()
            print("%s processing %s" % (threadName,data))
        else:
            queueLock.release()
        time.sleep(1)

class myThread(threading.Thread):
    def __init__(self,threadId,name,q):
        threading.Thread.__init__(self)
        self.threadId = threadId
        self.name = name
        self.q = q
    def run(self):
        print("starting " + self.name)
        process_data(self.name,self.q)
        print("exiting "+ self.name)

threadList = ["thread-1","thread-2","thread-3"]
nameList = ["One","Two","Three","Four","Five"]
threads = []
threadId = 1


""" xx """
for tName in threadList:
    thread = myThread(threadId,tName,workQueue)
    thread.start()
    threads.append(thread)
    threadId += 1

""" tianchong """
queueLock.acquire()
for word in nameList:
    workQueue.put(word)
queueLock.release()

while not workQueue.empty():
    pass

exitFlag = 1

for t in threads:
    t.join()
print("exiting Main thread.")
